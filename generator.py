import numpy as np
from scipy import special, stats
import matplotlib.pyplot as plt
import numbers
from tqdm import tqdm


# X is gamma_process, y is RVs from gamma process
def plot_qq(x1, y1, x2=None, quantiles=None, interpolation='nearest', ax=None, rug=False,
            rug_length=0.05, rug_kwargs=None, label="Normal Gamma QQ Plot", **kwargs):
    # Get current axes if none are provided
    if ax is None:
        ax = plt.gca()
    ax.set_xlabel("Theoretical RVs")
    ax.set_ylabel("Normal Gamma Process at t = 1")
    if quantiles is None:
        quantiles = min(len(x1), len(y1))

    # Compute quantiles of the two samples
    if isinstance(quantiles, numbers.Integral):
        quantiles = np.linspace(start=0, stop=1, num=int(quantiles))
    else:
        quantiles = np.atleast_1d(np.sort(quantiles))
    x_quantiles1 = np.quantile(x1, quantiles, interpolation=interpolation)
    y_quantiles1 = np.quantile(y1, quantiles, interpolation=interpolation)
    if x2 is not None:
        if quantiles is None:
            quantiles = min(len(x2), len(y1))

        # Compute quantiles of the two samples
        if isinstance(quantiles, numbers.Integral):
            quantiles = np.linspace(start=0, stop=1, num=int(quantiles))
        else:
            quantiles = np.atleast_1d(np.sort(quantiles))
        x_quantiles2 = np.quantile(x2, quantiles, interpolation=interpolation)
        y_quantiles2 = np.quantile(y1, quantiles, interpolation=interpolation)

    # Draw the rug plots if requested
    if rug:
        # Default rug plot settings
        rug_x_params = dict(ymin=0, ymax=rug_length, c='gray', alpha=0.5)
        rug_y_params = dict(xmin=0, xmax=rug_length, c='gray', alpha=0.5)

        # Override default setting by any user-specified settings
        if rug_kwargs is not None:
            rug_x_params.update(rug_kwargs)
            rug_y_params.update(rug_kwargs)

        # Draw the rug plots
        for point in x1:
            ax.axvline(point, **rug_x_params)
        for point in y1:
            ax.axhline(point, **rug_y_params)
        if x2 is not None:
            for point in x2:
                ax.axvline(point, **rug_x_params)
            for point in y1:
                ax.axhline(point, **rug_y_params)

    # Draw the q-q plot and compare with y = x
    ax.scatter(x_quantiles1, y_quantiles1, c="black", **kwargs, label="Q-Q plot")
    if x2 is not None:
        ax.scatter(x_quantiles2, y_quantiles2, c='red', **kwargs, label="Q-Q plot")
    lims = [
        np.min([ax.get_xlim(), ax.get_ylim()]),  # min of both axes
        np.max([ax.get_xlim(), ax.get_ylim()]),  # max of both axes
    ]
    # now plot both limits against each other
    ax.plot(lims, lims, 'k-', alpha=0.75, zorder=0, label="45 degree line")
    plt.title(label)
    ax.legend()
    # plt.show()


def gammaf(arg):
    return special.gamma(arg)


def powerI(element, index):
    val = element ** index
    return val


def powerL(elements: list, index):
    return np.array([elements[i] ** index for i in range(len(elements))])


def gamma_pdf(linspace, alpha, beta):
    """ tau must be a linspace mumpy array with support on positive half-line"""
    return stats.gamma.pdf(linspace, alpha,
                           scale=1 / beta)  # powerI(beta, alpha) * powerL(linspace, alpha - 1) * np.exp(-beta * linspace) * powerI(gammaf(alpha), -1)


def conditionalGaussian_pdf(linspace, mu, std):
    """ linspace must be a linspace numpy array with support in entire real line """
    return stats.norm.pdf(linspace, mu, std)


def plot_histogram1(histogram_sequence1, label):
    binvals, bins, _ = plt.hist(histogram_sequence1, 100, density=True, label="Process at t=1")
    xvals = np.linspace(stats.norm.ppf(0.00001), stats.norm.ppf(0.99999), histogram_sequence1.shape[0])
    plt.plot(xvals, stats.norm.pdf(xvals), label="Standard Normal Distribution")
    plt.xlabel("X")
    plt.ylabel("PDF")
    plt.legend()
    plt.title(label)
    plt.show()


def plot_histogram2(histogram_sequence, nu, mu, gamma, beta):
    binvals, bins, _ = plt.hist(histogram_sequence, 100, density=False)
    a1 = min(bins)
    a2 = max(bins)
    NG_dist = NGDistribution()
    pdf = NG_dist.pdf(np.linspace(a1, a2, len(bins)))
    # Do not SCALE! -> distorts the PDF
    # plt.plot(np.linspace(a1, a2, len(bins)), pdf)
    plt.show()


def gammaJumps(C, beta, epochs):
    """ Generates jumps from a Gamma process with parameters Ga(nu, gamma*gamma/2)"""
    x = 1 / (beta * (np.exp(epochs / C) - 1))
    prob_acc = (1 + beta * x) * np.exp(-beta * x)
    # Rejection sampling
    u = np.random.uniform(0., 1., size=x.size)
    jump_sizes = x[(u <= prob_acc)]
    return jump_sizes


def error_gammaJumps(C, beta, epochs):
    x = 1 / (beta * (np.exp(epochs / C) - 1))
    prob_acc = (1 + beta * x) * np.exp(-beta * x)
    # Rejection sampling
    u = np.random.uniform(0., 1., size=x.size)
    jump_sizes = x[(u <= prob_acc)]
    return jump_sizes, x, (u <= prob_acc)


def gammaProcess(C, beta, epochs, time_ax, T):
    jump_sizes = gammaJumps(C, beta, epochs)
    jump_times = np.random.uniform(0., T, size=jump_sizes.size)
    gamma_process = np.array([np.cumsum(jump_sizes * (jump_times <= t))[-1] for t in time_ax])
    return gamma_process


def generate_RVs(mu, beta, shape, rate, mu_W, std_W, L=10000):
    tau = np.random.gamma(shape, scale=1 / rate, size=L)
    x = np.random.normal(mu + beta * tau + mu_W * np.sqrt(tau), np.sqrt(tau) * std_W, size=L)
    return x, tau


class NGDistribution(stats.rv_continuous):
    def _pdf(self, x):
        mu, beta, nu, gamma, t = 0, 0, 4, 2, 1
        constant = (gamma ** (2 * t * nu) * (np.sqrt(beta ** 2 + gamma ** 2)) ** (1 - 2 * nu * t)) / (
                np.sqrt(2 * np.pi) * special.gamma(t * nu) * (2 ** ((t * nu) - 1)))
        bessel_component = (gamma ** 2 / 2) * np.abs(x - mu)
        u1 = np.exp(beta * (x - mu))
        u2 = bessel_component ** (nu - 0.5)
        u3 = special.kv(
            nu - 0.5, bessel_component)
        return constant * u1 * u2 * u3


def getepochs1():
    return np.array([7.83318967e-02, 2.50077495e-01, 5.13297977e-01, 1.23213316e+00
                        , 2.34574122e+00, 2.59180867e+00, 3.86570467e+00, 6.37408885e+00
                        , 6.85244391e+00, 7.68884343e+00, 8.17384825e+00, 8.68561948e+00
                        , 8.75161798e+00, 8.86323394e+00, 9.05485389e+00, 1.03120730e+01
                        , 1.06269401e+01, 1.18114790e+01, 1.23563118e+01, 1.25590997e+01
                        , 1.30054757e+01, 1.36070432e+01, 1.45881527e+01, 1.47391789e+01
                        , 1.49083323e+01, 1.70983048e+01, 1.72801244e+01, 1.75889443e+01
                        , 1.83548685e+01, 1.87598148e+01, 1.90381520e+01, 1.91582698e+01
                        , 2.04988693e+01, 2.16383568e+01, 2.17860730e+01, 2.23509869e+01
                        , 2.25746605e+01, 2.45167760e+01, 2.57511033e+01, 3.01817941e+01
                        , 3.02309112e+01, 3.03354525e+01, 3.05327358e+01, 3.10666571e+01
                        , 3.35430796e+01, 3.55747654e+01, 4.17323006e+01, 4.56675339e+01
                        , 4.77162933e+01, 4.78442066e+01, 4.83339660e+01, 5.10207399e+01
                        , 5.20669560e+01, 5.25289428e+01, 5.36348103e+01, 5.45510379e+01
                        , 5.50287292e+01, 5.61074995e+01, 5.65189800e+01, 5.67130499e+01
                        , 5.68959182e+01, 5.73803809e+01, 5.77378517e+01, 5.84745020e+01
                        , 5.93946801e+01, 5.95621618e+01, 5.99018244e+01, 6.23480250e+01
                        , 6.31708228e+01, 6.51739546e+01, 6.66936020e+01, 6.75156331e+01
                        , 7.04041655e+01, 7.16524462e+01, 7.25153638e+01, 7.84381574e+01
                        , 7.85929523e+01, 7.93077313e+01, 7.99081552e+01, 8.46576276e+01
                        , 8.46863405e+01, 8.47194583e+01, 8.48103606e+01, 8.54315848e+01
                        , 8.59958441e+01, 8.62561661e+01, 8.73041843e+01, 8.83803363e+01
                        , 8.88873820e+01, 9.01600812e+01, 9.03709083e+01, 9.17768311e+01
                        , 9.29553667e+01, 9.51830569e+01, 9.59166511e+01, 9.71826945e+01
                        , 1.00239944e+02, 1.00373945e+02, 1.00411407e+02, 1.00784090e+02
                        , 1.03482593e+02, 1.04605084e+02, 1.05384477e+02, 1.06563569e+02
                        , 1.06997539e+02, 1.12586493e+02, 1.12684375e+02, 1.14300365e+02
                        , 1.15612475e+02, 1.16263835e+02, 1.16570227e+02, 1.18396076e+02
                        , 1.19337306e+02, 1.19689606e+02, 1.20112653e+02, 1.22211293e+02
                        , 1.23011404e+02, 1.24655450e+02, 1.25799141e+02, 1.26518226e+02
                        , 1.27822701e+02, 1.28742465e+02, 1.29550131e+02, 1.30079917e+02
                        , 1.31275001e+02, 1.31587335e+02, 1.31593428e+02, 1.31818994e+02
                        , 1.33327928e+02, 1.33637675e+02, 1.36512756e+02, 1.37472020e+02
                        , 1.38442195e+02, 1.39830658e+02, 1.39900770e+02, 1.40329228e+02
                        , 1.41427281e+02, 1.42665842e+02, 1.42943671e+02, 1.44683330e+02
                        , 1.46969135e+02, 1.47726795e+02, 1.48390696e+02, 1.48465268e+02
                        , 1.48646574e+02, 1.49303707e+02, 1.50028240e+02, 1.50225440e+02
                        , 1.51246465e+02, 1.51766276e+02, 1.53167210e+02, 1.53612604e+02
                        , 1.54133135e+02, 1.55194961e+02, 1.57108794e+02, 1.60031135e+02
                        , 1.63661773e+02, 1.63795089e+02, 1.68195448e+02, 1.69501718e+02
                        , 1.71420916e+02, 1.71888632e+02, 1.74880754e+02, 1.77589604e+02
                        , 1.81802527e+02, 1.81811085e+02, 1.82823262e+02, 1.83592987e+02
                        , 1.84001734e+02, 1.84282230e+02, 1.86458649e+02, 1.86678704e+02
                        , 1.87050368e+02, 1.88418412e+02, 1.92565260e+02, 1.93485679e+02
                        , 1.94076862e+02, 1.94324278e+02, 1.94439111e+02, 1.96528857e+02
                        , 1.96572190e+02, 1.97254800e+02, 1.98450705e+02, 1.99041050e+02
                        , 2.06076750e+02, 2.06643390e+02, 2.07638133e+02, 2.09249669e+02
                        , 2.09340953e+02, 2.10277018e+02, 2.10794500e+02, 2.11857332e+02
                        , 2.14608854e+02, 2.15273928e+02, 2.17388034e+02, 2.18280789e+02
                        , 2.22121458e+02, 2.22583344e+02, 2.25732742e+02, 2.25814427e+02
                        , 2.26516034e+02, 2.28995545e+02, 2.30384895e+02, 2.32442452e+02
                        , 2.32581917e+02, 2.33154823e+02, 2.33320475e+02, 2.34544305e+02
                        , 2.34907027e+02, 2.34961808e+02, 2.35077590e+02, 2.35209764e+02
                        , 2.36833838e+02, 2.36906570e+02, 2.40420579e+02, 2.40475252e+02
                        , 2.40859848e+02, 2.42828553e+02, 2.43526838e+02, 2.43527782e+02
                        , 2.44063377e+02, 2.44685088e+02, 2.44916919e+02, 2.45101229e+02
                        , 2.45780968e+02, 2.46990868e+02, 2.47899902e+02, 2.48245970e+02
                        , 2.49453386e+02, 2.49695096e+02, 2.51360963e+02, 2.53565484e+02
                        , 2.53620297e+02, 2.56325025e+02, 2.58130359e+02, 2.58495768e+02
                        , 2.59833726e+02, 2.59972482e+02, 2.62416802e+02, 2.62739153e+02
                        , 2.62987464e+02, 2.63194762e+02, 2.64962015e+02, 2.66856504e+02
                        , 2.68084280e+02, 2.68997611e+02, 2.69348826e+02, 2.69858372e+02
                        , 2.70331952e+02, 2.70688794e+02, 2.73200458e+02, 2.74021125e+02
                        , 2.77402339e+02, 2.78041408e+02, 2.78752607e+02, 2.80971981e+02
                        , 2.81306426e+02, 2.82887073e+02, 2.83799233e+02, 2.84552583e+02
                        , 2.85280826e+02, 2.85928718e+02, 2.85932856e+02, 2.86271100e+02
                        , 2.87475349e+02, 2.88762082e+02, 2.88769148e+02, 2.88817182e+02
                        , 2.89116989e+02, 2.89184136e+02, 2.89260122e+02, 2.91797461e+02
                        , 2.91944164e+02, 2.92859117e+02, 2.92926038e+02, 2.93469203e+02
                        , 2.93580538e+02, 2.93807423e+02, 2.94812657e+02, 2.95506783e+02
                        , 2.95746536e+02, 2.97499219e+02, 2.97830286e+02, 2.98242481e+02
                        , 2.98492512e+02, 2.99105256e+02, 3.00369981e+02, 3.01680538e+02
                        , 3.01816793e+02, 3.02559305e+02, 3.03224101e+02, 3.03493690e+02
                        , 3.04926663e+02, 3.06905954e+02, 3.07549214e+02, 3.07560620e+02
                        , 3.07940557e+02, 3.08258532e+02, 3.09047646e+02, 3.09500832e+02
                        , 3.09944909e+02, 3.10304322e+02, 3.13538169e+02, 3.15124793e+02
                        , 3.17487181e+02, 3.18214104e+02, 3.19822400e+02, 3.21608967e+02
                        , 3.21988259e+02, 3.22556573e+02, 3.22771299e+02, 3.22927757e+02
                        , 3.23314748e+02, 3.24201626e+02, 3.25391281e+02, 3.25403667e+02
                        , 3.26077563e+02, 3.26951558e+02, 3.27865638e+02, 3.28175409e+02
                        , 3.29413063e+02, 3.29766921e+02, 3.30670334e+02, 3.31021528e+02
                        , 3.32031094e+02, 3.32124773e+02, 3.35628472e+02, 3.36099736e+02
                        , 3.36597201e+02, 3.38344571e+02, 3.40170888e+02, 3.41554703e+02
                        , 3.43954447e+02, 3.44234854e+02, 3.45748037e+02, 3.46453752e+02
                        , 3.47263610e+02, 3.47855648e+02, 3.48654728e+02, 3.49889097e+02
                        , 3.50902708e+02, 3.51739084e+02, 3.52686460e+02, 3.54478464e+02
                        , 3.55817873e+02, 3.57487637e+02, 3.58892329e+02, 3.61032406e+02
                        , 3.61479362e+02, 3.62033301e+02, 3.62683020e+02, 3.62908737e+02
                        , 3.63924458e+02, 3.64414900e+02, 3.65325178e+02, 3.65443813e+02
                        , 3.66097009e+02, 3.66240280e+02, 3.66287696e+02, 3.67097581e+02
                        , 3.67295047e+02, 3.69521987e+02, 3.69700973e+02, 3.69710929e+02
                        , 3.70636819e+02, 3.72692571e+02, 3.72901813e+02, 3.73064317e+02
                        , 3.74907634e+02, 3.77341560e+02, 3.78339490e+02, 3.78496086e+02
                        , 3.81471364e+02, 3.81652797e+02, 3.82325850e+02, 3.82511754e+02
                        , 3.83928657e+02, 3.84317913e+02, 3.84745689e+02, 3.84750295e+02
                        , 3.86903424e+02, 3.90023851e+02, 3.90673843e+02, 3.92397869e+02
                        , 3.92469290e+02, 3.92563233e+02, 3.92688465e+02, 3.92709557e+02
                        , 3.94901704e+02, 3.95489090e+02, 3.98886023e+02, 3.99799338e+02
                        , 4.03175212e+02, 4.03904512e+02, 4.06819051e+02, 4.07276316e+02
                        , 4.08810069e+02, 4.10382692e+02, 4.10664821e+02, 4.13331065e+02
                        , 4.14135168e+02, 4.14374957e+02, 4.15689025e+02, 4.15924695e+02
                        , 4.15967041e+02, 4.16330628e+02, 4.17428388e+02, 4.19189468e+02
                        , 4.19239243e+02, 4.19683600e+02, 4.20649699e+02, 4.20918811e+02
                        , 4.22951042e+02, 4.23983977e+02, 4.24193059e+02, 4.24277266e+02
                        , 4.24800818e+02, 4.25120905e+02, 4.27193647e+02, 4.28721395e+02
                        , 4.28998822e+02, 4.29035474e+02, 4.29241532e+02, 4.29822158e+02
                        , 4.30770316e+02, 4.35202380e+02, 4.36208024e+02, 4.36900333e+02
                        , 4.37679845e+02, 4.37712233e+02, 4.40046555e+02, 4.41597010e+02
                        , 4.41839759e+02, 4.43248030e+02, 4.43640186e+02, 4.43795854e+02
                        , 4.44134563e+02, 4.44602704e+02, 4.47545681e+02, 4.48223220e+02
                        , 4.49360728e+02, 4.50608198e+02, 4.50650563e+02, 4.51910912e+02
                        , 4.52709303e+02, 4.52763361e+02, 4.53758193e+02, 4.57014976e+02
                        , 4.57550845e+02, 4.59692517e+02, 4.59746212e+02, 4.60582716e+02
                        , 4.62770761e+02, 4.64139781e+02, 4.64825374e+02, 4.65628747e+02
                        , 4.68444087e+02, 4.68474249e+02, 4.69009610e+02, 4.71082760e+02
                        , 4.71161316e+02, 4.72284212e+02, 4.73933253e+02, 4.75604730e+02
                        , 4.76176948e+02, 4.77288714e+02, 4.79128026e+02, 4.79916099e+02
                        , 4.80516259e+02, 4.80846870e+02, 4.81423502e+02, 4.83633644e+02
                        , 4.84021624e+02, 4.84110433e+02, 4.84270412e+02, 4.87494156e+02
                        , 4.90479153e+02, 4.90688419e+02, 4.90714311e+02, 4.90724935e+02
                        , 4.90998589e+02, 4.92139603e+02, 4.93031240e+02, 4.95838143e+02
                        , 4.96195118e+02, 4.97210582e+02, 4.97245524e+02, 4.99024230e+02
                        , 4.99650707e+02, 5.00372823e+02, 5.00776920e+02, 5.00995312e+02
                        , 5.01074375e+02, 5.04093609e+02, 5.07832309e+02, 5.08110367e+02
                        , 5.09441282e+02, 5.10461003e+02, 5.12291049e+02, 5.15063436e+02
                        , 5.15629043e+02, 5.16858715e+02, 5.17740651e+02, 5.20127348e+02
                        , 5.21456759e+02, 5.21679195e+02, 5.21970439e+02, 5.22776015e+02
                        , 5.23970272e+02, 5.25034161e+02, 5.25430834e+02, 5.26352826e+02
                        , 5.27347586e+02, 5.27364460e+02, 5.27448037e+02, 5.27807931e+02
                        , 5.30575442e+02, 5.33879528e+02, 5.34327302e+02, 5.38321459e+02
                        , 5.38885494e+02, 5.40407267e+02, 5.42478685e+02, 5.47010528e+02
                        , 5.47163600e+02, 5.47432466e+02, 5.47744029e+02, 5.48505462e+02
                        , 5.48953742e+02, 5.49329546e+02, 5.49892103e+02, 5.50036146e+02
                        , 5.50493824e+02, 5.52298516e+02, 5.53047537e+02, 5.54426437e+02
                        , 5.54435307e+02, 5.55619975e+02, 5.57536790e+02, 5.57829509e+02
                        , 5.57967247e+02, 5.59254654e+02, 5.60041163e+02, 5.62205501e+02
                        , 5.63008463e+02, 5.63109410e+02, 5.63224713e+02, 5.63876006e+02
                        , 5.63883868e+02, 5.65036773e+02, 5.65178213e+02, 5.66217184e+02
                        , 5.68825711e+02, 5.69570681e+02, 5.71724593e+02, 5.74013775e+02
                        , 5.75344105e+02, 5.75493528e+02, 5.76017449e+02, 5.76663208e+02
                        , 5.77024719e+02, 5.77110437e+02, 5.77504806e+02, 5.78404743e+02
                        , 5.78903148e+02, 5.80533229e+02, 5.80561987e+02, 5.81656981e+02
                        , 5.81938925e+02, 5.85831173e+02, 5.89369461e+02, 5.90341898e+02
                        , 5.90570042e+02, 5.92148690e+02, 5.92370167e+02, 5.92866227e+02
                        , 5.94896972e+02, 5.95267850e+02, 5.95455069e+02, 5.96982952e+02
                        , 5.98160074e+02, 5.98190010e+02, 5.98639018e+02, 5.99703443e+02
                        , 5.99767526e+02, 6.00811920e+02, 6.01963638e+02, 6.03882174e+02
                        , 6.04258245e+02, 6.04307059e+02, 6.05693158e+02, 6.07922303e+02
                        , 6.09669519e+02, 6.11871220e+02, 6.12070970e+02, 6.12536920e+02
                        , 6.12579484e+02, 6.14922639e+02, 6.15996492e+02, 6.16600537e+02
                        , 6.16634312e+02, 6.16815814e+02, 6.16968466e+02, 6.18169831e+02
                        , 6.19208394e+02, 6.19668184e+02, 6.22790367e+02, 6.24084860e+02
                        , 6.24565716e+02, 6.25444619e+02, 6.25548249e+02, 6.26443302e+02
                        , 6.26474734e+02, 6.26759764e+02, 6.30153519e+02, 6.30898671e+02
                        , 6.31240396e+02, 6.31738393e+02, 6.32481677e+02, 6.34899150e+02
                        , 6.35516580e+02, 6.35519977e+02, 6.35917407e+02, 6.39890262e+02
                        , 6.40637899e+02, 6.42410630e+02, 6.42670524e+02, 6.44274928e+02
                        , 6.45101435e+02, 6.45477211e+02, 6.45992107e+02, 6.47031769e+02
                        , 6.47106127e+02, 6.47986216e+02, 6.49338116e+02, 6.50032185e+02
                        , 6.51541379e+02, 6.52232086e+02, 6.52599593e+02, 6.55976713e+02
                        , 6.57574486e+02, 6.58270408e+02, 6.58591812e+02, 6.59395271e+02
                        , 6.59549238e+02, 6.59915393e+02, 6.61124796e+02, 6.61355603e+02
                        , 6.61376130e+02, 6.62311899e+02, 6.62345981e+02, 6.62667140e+02
                        , 6.63964823e+02, 6.65083419e+02, 6.67264173e+02, 6.67696101e+02
                        , 6.71489573e+02, 6.72554577e+02, 6.72734028e+02, 6.72983675e+02
                        , 6.79181099e+02, 6.79600569e+02, 6.81511576e+02, 6.81532646e+02
                        , 6.82603167e+02, 6.82625286e+02, 6.84379901e+02, 6.87961062e+02
                        , 6.89423590e+02, 6.89632271e+02, 6.90334829e+02, 6.90540256e+02
                        , 6.90755322e+02, 6.93109218e+02, 6.94036040e+02, 6.94442867e+02
                        , 6.95276592e+02, 6.96142191e+02, 6.96350197e+02, 6.97944239e+02
                        , 6.97956077e+02, 6.98100155e+02, 6.98691232e+02, 6.99792742e+02
                        , 6.99812094e+02, 7.01721336e+02, 7.01931911e+02, 7.02520834e+02
                        , 7.04228375e+02, 7.05403838e+02, 7.05856031e+02, 7.05883108e+02
                        , 7.06425553e+02, 7.09087388e+02, 7.09144445e+02, 7.10459808e+02
                        , 7.10546386e+02, 7.11178211e+02, 7.13936522e+02, 7.15436670e+02
                        , 7.16099609e+02, 7.16612027e+02, 7.17806707e+02, 7.18829052e+02
                        , 7.19929332e+02, 7.20049537e+02, 7.20653254e+02, 7.21469484e+02
                        , 7.22905353e+02, 7.22993442e+02, 7.24593170e+02, 7.24717908e+02
                        , 7.24784380e+02, 7.25824835e+02, 7.27515601e+02, 7.28791487e+02
                        , 7.29343928e+02, 7.30975134e+02, 7.31645998e+02, 7.32035253e+02
                        , 7.33439514e+02, 7.33773887e+02, 7.35356934e+02, 7.37865213e+02
                        , 7.38039866e+02, 7.40378225e+02, 7.42300319e+02, 7.46975545e+02
                        , 7.47151409e+02, 7.47518285e+02, 7.48460710e+02, 7.49329708e+02
                        , 7.49790664e+02, 7.49999083e+02, 7.50704383e+02, 7.52393812e+02
                        , 7.53816779e+02, 7.55489262e+02, 7.56876026e+02, 7.58509639e+02
                        , 7.59687390e+02, 7.60841427e+02, 7.61218157e+02, 7.62448336e+02
                        , 7.62875099e+02, 7.64143565e+02, 7.64465796e+02, 7.65088802e+02
                        , 7.66056094e+02, 7.66107695e+02, 7.67867866e+02, 7.67975040e+02
                        , 7.68680167e+02, 7.69197212e+02, 7.71090816e+02, 7.71349338e+02
                        , 7.71554098e+02, 7.72309700e+02, 7.72502586e+02, 7.72612922e+02
                        , 7.73031864e+02, 7.77418376e+02, 7.78258494e+02, 7.79718800e+02
                        , 7.80099561e+02, 7.80115749e+02, 7.81318315e+02, 7.81583445e+02
                        , 7.85031084e+02, 7.86058529e+02, 7.86978552e+02, 7.87810148e+02
                        , 7.88173825e+02, 7.88205704e+02, 7.88481766e+02, 7.88731978e+02
                        , 7.92435603e+02, 7.92604013e+02, 7.96091136e+02, 7.96652666e+02
                        , 7.98815910e+02, 7.99123071e+02, 7.99647765e+02, 7.99660260e+02
                        , 8.00199666e+02, 8.01442948e+02, 8.02726516e+02, 8.03511341e+02
                        , 8.03521171e+02, 8.05282106e+02, 8.05540173e+02, 8.05739638e+02
                        , 8.06674958e+02, 8.07174219e+02, 8.07566078e+02, 8.07652584e+02
                        , 8.07705105e+02, 8.09960527e+02, 8.11426117e+02, 8.11775366e+02
                        , 8.11879912e+02, 8.12156616e+02, 8.12989406e+02, 8.13166493e+02
                        , 8.13717255e+02, 8.16248518e+02, 8.17431967e+02, 8.17960414e+02
                        , 8.17991598e+02, 8.18023120e+02, 8.18677025e+02, 8.18805797e+02
                        , 8.19929900e+02, 8.22036225e+02, 8.23171592e+02, 8.23819794e+02
                        , 8.26612490e+02, 8.27259163e+02, 8.28685033e+02, 8.30879668e+02
                        , 8.35485363e+02, 8.35684641e+02, 8.37125268e+02, 8.37779463e+02
                        , 8.39503008e+02, 8.40015708e+02, 8.41314543e+02, 8.42046788e+02
                        , 8.42476365e+02, 8.42581022e+02, 8.43103561e+02, 8.43472508e+02
                        , 8.43625273e+02, 8.44138074e+02, 8.44412705e+02, 8.44908004e+02
                        , 8.47030362e+02, 8.48320018e+02, 8.49950506e+02, 8.50514562e+02
                        , 8.50544993e+02, 8.52315061e+02, 8.52718992e+02, 8.52817378e+02
                        , 8.54342309e+02, 8.56972793e+02, 8.57881485e+02, 8.60649392e+02
                        , 8.62491177e+02, 8.63074955e+02, 8.64025352e+02, 8.64722244e+02
                        , 8.66253376e+02, 8.66307877e+02, 8.66626164e+02, 8.67720746e+02
                        , 8.68660488e+02, 8.69304977e+02, 8.69510462e+02, 8.69635444e+02
                        , 8.72124040e+02, 8.74347231e+02, 8.74910005e+02, 8.75417108e+02
                        , 8.76117567e+02, 8.77510623e+02, 8.77987042e+02, 8.78363541e+02
                        , 8.80926488e+02, 8.81045327e+02, 8.81807356e+02, 8.82702015e+02
                        , 8.82748463e+02, 8.83420165e+02, 8.83783925e+02, 8.85688017e+02
                        , 8.85826500e+02, 8.86456304e+02, 8.86633132e+02, 8.87413812e+02
                        , 8.88740652e+02, 8.88775082e+02, 8.89872168e+02, 8.89908273e+02
                        , 8.92188296e+02, 8.93743217e+02, 8.94495501e+02, 8.96461030e+02
                        , 8.96687479e+02, 8.96699179e+02, 8.99213598e+02, 8.99265095e+02
                        , 8.99872984e+02, 9.00688768e+02, 9.01354405e+02, 9.02158813e+02
                        , 9.02221516e+02, 9.03088874e+02, 9.03881264e+02, 9.04155259e+02
                        , 9.08741460e+02, 9.08798053e+02, 9.09111851e+02, 9.11720314e+02
                        , 9.14712901e+02, 9.14752964e+02, 9.16824983e+02, 9.17350458e+02
                        , 9.18212605e+02, 9.18239850e+02, 9.21834228e+02, 9.23278622e+02
                        , 9.29787776e+02, 9.30841867e+02, 9.32116554e+02, 9.32599615e+02
                        , 9.34797671e+02, 9.35300207e+02, 9.35793032e+02, 9.37204642e+02
                        , 9.40792510e+02, 9.42289116e+02, 9.42365618e+02, 9.43197696e+02
                        , 9.45978528e+02, 9.49506277e+02, 9.52281764e+02, 9.52871016e+02
                        , 9.53743558e+02, 9.54458271e+02, 9.55117385e+02, 9.55667425e+02
                        , 9.57208067e+02, 9.59330086e+02, 9.59642079e+02, 9.59868944e+02
                        , 9.60234778e+02, 9.60475518e+02, 9.60878882e+02, 9.61676696e+02
                        , 9.61867494e+02, 9.64887955e+02, 9.65319761e+02, 9.66132942e+02
                        , 9.67395761e+02, 9.67655572e+02, 9.69136243e+02, 9.69323897e+02
                        , 9.69670756e+02, 9.69855549e+02, 9.70528344e+02, 9.70939283e+02
                        , 9.71134912e+02, 9.71578306e+02, 9.72718619e+02, 9.77339921e+02
                        , 9.77371885e+02, 9.78823128e+02, 9.79128757e+02, 9.79326247e+02
                        , 9.79642695e+02, 9.79985682e+02, 9.82948714e+02, 9.83849073e+02
                        , 9.84322866e+02, 9.84391693e+02, 9.84724833e+02, 9.85414525e+02
                        , 9.86846429e+02, 9.89697913e+02, 9.90420537e+02, 9.90507029e+02
                        , 9.91518707e+02, 9.91914673e+02, 9.92891200e+02, 9.92994537e+02
                        , 9.93141884e+02, 9.93182386e+02, 9.94722866e+02, 9.96224444e+02
                        , 9.96483133e+02, 9.97859382e+02, 9.98468466e+02, 9.99378351e+02
                        , 1.00027463e+03, 1.00149482e+03, 1.00339215e+03, 1.00467535e+03
                        , 1.00499753e+03, 1.00525799e+03, 1.00526395e+03, 1.00817658e+03
                        , 1.00839090e+03, 1.01007548e+03, 1.01018051e+03, 1.01068557e+03
                        , 1.01098457e+03, 1.01150864e+03, 1.01378523e+03, 1.01419951e+03])


def getepochs2():
    return np.array([1.34550403e-01, 2.63255404e-01, 4.08035032e-01, 4.52400969e-01
                        , 1.29997033e+00, 3.97522692e+00, 5.96093091e+00, 5.96407321e+00
                        , 6.37963106e+00, 7.15774612e+00, 1.02599894e+01, 1.04108060e+01
                        , 1.17403023e+01, 1.23286907e+01, 1.53900642e+01, 1.68665606e+01
                        , 1.77940238e+01, 1.78975630e+01, 1.82743168e+01, 1.95658486e+01
                        , 1.97522969e+01, 1.98508704e+01, 1.99790528e+01, 2.09399795e+01
                        , 2.12509444e+01, 2.16231170e+01, 2.23445612e+01, 2.26363557e+01
                        , 2.29770340e+01, 2.30455962e+01, 2.46380332e+01, 2.61379331e+01
                        , 2.77579900e+01, 2.94044620e+01, 3.18538098e+01, 3.39275572e+01
                        , 3.47809322e+01, 3.52454134e+01, 3.64799580e+01, 3.92581464e+01
                        , 3.93511714e+01, 3.97655575e+01, 4.02670873e+01, 4.04539749e+01
                        , 4.08775115e+01, 4.17161213e+01, 4.18172227e+01, 4.21374660e+01
                        , 4.29416732e+01, 4.49272552e+01, 4.58343947e+01, 4.63746548e+01
                        , 4.75710755e+01, 4.81039010e+01, 5.12188336e+01, 5.29611322e+01
                        , 5.30265536e+01, 5.57862509e+01, 5.58024818e+01, 5.58853118e+01
                        , 5.65712099e+01, 5.75251604e+01, 5.87592659e+01, 6.04868204e+01
                        , 6.05854800e+01, 6.09243715e+01, 6.17805535e+01, 6.20014965e+01
                        , 6.27103396e+01, 6.35344970e+01, 6.48492936e+01, 6.55570377e+01
                        , 6.63020090e+01, 6.73659244e+01, 6.93735738e+01, 7.08014935e+01
                        , 7.11924416e+01, 7.29116365e+01, 7.35983451e+01, 7.38068632e+01
                        , 7.38192381e+01, 7.39728539e+01, 7.53641862e+01, 7.53823717e+01
                        , 7.60285865e+01, 7.68695260e+01, 7.96621871e+01, 7.98549771e+01
                        , 7.99978597e+01, 8.24101091e+01, 8.33096261e+01, 8.41836310e+01
                        , 8.44029571e+01, 8.50020794e+01, 8.52246285e+01, 8.52982030e+01
                        , 8.53628823e+01, 8.54679408e+01, 8.57894165e+01, 8.75122157e+01
                        , 8.84034071e+01, 9.02858017e+01, 9.25991519e+01, 9.28053781e+01
                        , 9.33724674e+01, 9.36497105e+01, 9.41992759e+01, 9.46111779e+01
                        , 9.46288630e+01, 9.54279278e+01, 9.59726395e+01, 9.65548270e+01
                        , 9.72620424e+01, 9.83055848e+01, 1.00173361e+02, 1.01692565e+02
                        , 1.02183090e+02, 1.02341224e+02, 1.03645887e+02, 1.05000369e+02
                        , 1.05291736e+02, 1.06035150e+02, 1.06699629e+02, 1.06813421e+02
                        , 1.08433692e+02, 1.08532488e+02, 1.08924247e+02, 1.10195118e+02
                        , 1.10818049e+02, 1.13468427e+02, 1.16519592e+02, 1.17147428e+02
                        , 1.17322962e+02, 1.18019603e+02, 1.19741597e+02, 1.20893442e+02
                        , 1.21875426e+02, 1.21957237e+02, 1.22349879e+02, 1.25617015e+02
                        , 1.26443301e+02, 1.27025998e+02, 1.27510509e+02, 1.30427469e+02
                        , 1.30554999e+02, 1.30830386e+02, 1.34268143e+02, 1.36338943e+02
                        , 1.36563689e+02, 1.36728900e+02, 1.36932375e+02, 1.37950701e+02
                        , 1.38039700e+02, 1.42936055e+02, 1.46687176e+02, 1.46752078e+02
                        , 1.49310000e+02, 1.50090286e+02, 1.50137615e+02, 1.50172942e+02
                        , 1.50453941e+02, 1.50807579e+02, 1.51178202e+02, 1.51359106e+02
                        , 1.51452537e+02, 1.55360468e+02, 1.57253870e+02, 1.58682411e+02
                        , 1.59190256e+02, 1.60432779e+02, 1.60824504e+02, 1.60943831e+02
                        , 1.61982397e+02, 1.62713802e+02, 1.63107963e+02, 1.63392745e+02
                        , 1.63935124e+02, 1.64897730e+02, 1.65131622e+02, 1.70060030e+02
                        , 1.70930202e+02, 1.73392262e+02, 1.73456296e+02, 1.73790642e+02
                        , 1.74143907e+02, 1.74352187e+02, 1.77402368e+02, 1.79599487e+02
                        , 1.80075721e+02, 1.80169357e+02, 1.80562429e+02, 1.80754843e+02
                        , 1.80774142e+02, 1.83150842e+02, 1.85431127e+02, 1.85619073e+02
                        , 1.86659052e+02, 1.88162429e+02, 1.89101534e+02, 1.89241193e+02
                        , 1.90767487e+02, 1.93226652e+02, 1.93815321e+02, 1.95270320e+02
                        , 1.95597544e+02, 1.95914342e+02, 1.96139229e+02, 1.96527209e+02
                        , 1.96846275e+02, 1.98935722e+02, 2.01926511e+02, 2.04077750e+02
                        , 2.04079953e+02, 2.05632765e+02, 2.07717250e+02, 2.10407924e+02
                        , 2.10830317e+02, 2.11170587e+02, 2.12560141e+02, 2.12833542e+02
                        , 2.13117646e+02, 2.13144310e+02, 2.13153533e+02, 2.13256273e+02
                        , 2.15627503e+02, 2.16393950e+02, 2.16682797e+02, 2.17608010e+02
                        , 2.21813340e+02, 2.22143806e+02, 2.22385932e+02, 2.22609349e+02
                        , 2.23023604e+02, 2.24153151e+02, 2.24259774e+02, 2.24649042e+02
                        , 2.25101653e+02, 2.26477433e+02, 2.26641906e+02, 2.27657709e+02
                        , 2.27799971e+02, 2.28109396e+02, 2.29019202e+02, 2.30047610e+02
                        , 2.32059877e+02, 2.33377657e+02, 2.33884637e+02, 2.34542222e+02
                        , 2.36213939e+02, 2.42712180e+02, 2.46096300e+02, 2.46358969e+02
                        , 2.46517578e+02, 2.47094530e+02, 2.47217667e+02, 2.47829637e+02
                        , 2.48615633e+02, 2.49090521e+02, 2.50748362e+02, 2.54367878e+02
                        , 2.54775188e+02, 2.55482331e+02, 2.57315526e+02, 2.59048859e+02
                        , 2.59198639e+02, 2.62498988e+02, 2.63077096e+02, 2.63077866e+02
                        , 2.63858528e+02, 2.64994727e+02, 2.68768968e+02, 2.68986607e+02
                        , 2.70406724e+02, 2.70720773e+02, 2.71381021e+02, 2.73612868e+02
                        , 2.74051916e+02, 2.76148837e+02, 2.77310946e+02, 2.79548413e+02
                        , 2.79601618e+02, 2.80052824e+02, 2.80075019e+02, 2.80193746e+02
                        , 2.81623870e+02, 2.81792919e+02, 2.88472524e+02, 2.89953936e+02
                        , 2.91939602e+02, 2.94477573e+02, 2.94779452e+02, 2.95126729e+02
                        , 2.96597927e+02, 2.97528310e+02, 2.98264767e+02, 2.98288969e+02
                        , 2.98584164e+02, 2.98708169e+02, 2.98849951e+02, 2.99089110e+02
                        , 2.99635579e+02, 3.01335885e+02, 3.04507740e+02, 3.07831163e+02
                        , 3.10195734e+02, 3.11296585e+02, 3.11604681e+02, 3.11660490e+02
                        , 3.12113191e+02, 3.13163798e+02, 3.14778266e+02, 3.14913409e+02
                        , 3.15171215e+02, 3.16092453e+02, 3.18830890e+02, 3.20410595e+02
                        , 3.20827797e+02, 3.20938598e+02, 3.21172581e+02, 3.25093082e+02
                        , 3.27329227e+02, 3.27453903e+02, 3.27684494e+02, 3.28531683e+02
                        , 3.29006034e+02, 3.29243477e+02, 3.29408084e+02, 3.30613265e+02
                        , 3.32068713e+02, 3.32581067e+02, 3.34787085e+02, 3.35361815e+02
                        , 3.36223678e+02, 3.37762633e+02, 3.39138751e+02, 3.39481227e+02
                        , 3.39899100e+02, 3.41268523e+02, 3.41602798e+02, 3.42011238e+02
                        , 3.42236065e+02, 3.42274084e+02, 3.44507454e+02, 3.45085400e+02
                        , 3.46341042e+02, 3.46962647e+02, 3.47592143e+02, 3.47771032e+02
                        , 3.47811718e+02, 3.48036817e+02, 3.48839781e+02, 3.49587048e+02
                        , 3.50536213e+02, 3.53532539e+02, 3.54359508e+02, 3.56945981e+02
                        , 3.57079058e+02, 3.57404806e+02, 3.58016610e+02, 3.58030189e+02
                        , 3.59343424e+02, 3.59878726e+02, 3.60694910e+02, 3.60963230e+02
                        , 3.62347908e+02, 3.63704134e+02, 3.63989956e+02, 3.64140211e+02
                        , 3.64236527e+02, 3.64662664e+02, 3.66675426e+02, 3.66797437e+02
                        , 3.67536321e+02, 3.68608085e+02, 3.68664893e+02, 3.68954080e+02
                        , 3.69641088e+02, 3.69674302e+02, 3.71158951e+02, 3.71256203e+02
                        , 3.73644069e+02, 3.74772544e+02, 3.75363366e+02, 3.75912142e+02
                        , 3.76563574e+02, 3.77177126e+02, 3.77804408e+02, 3.79055218e+02
                        , 3.79459800e+02, 3.79546363e+02, 3.79981141e+02, 3.80480396e+02
                        , 3.86744663e+02, 3.88049213e+02, 3.88382807e+02, 3.90223022e+02
                        , 3.93691917e+02, 3.97261828e+02, 3.97749622e+02, 3.98262855e+02
                        , 3.98972787e+02, 3.99168762e+02, 4.02652636e+02, 4.04020270e+02
                        , 4.04702134e+02, 4.06197750e+02, 4.06645645e+02, 4.10253536e+02
                        , 4.10869397e+02, 4.12540821e+02, 4.13632299e+02, 4.14962465e+02
                        , 4.15328750e+02, 4.15356850e+02, 4.16068104e+02, 4.17765171e+02
                        , 4.19435055e+02, 4.20680322e+02, 4.20762951e+02, 4.21283759e+02
                        , 4.21675021e+02, 4.21953238e+02, 4.22828588e+02, 4.23160681e+02
                        , 4.23488843e+02, 4.23568183e+02, 4.26055224e+02, 4.28171777e+02
                        , 4.28261850e+02, 4.28840744e+02, 4.29950727e+02, 4.30905625e+02
                        , 4.31126420e+02, 4.31658483e+02, 4.33560245e+02, 4.34236557e+02
                        , 4.34574879e+02, 4.34658918e+02, 4.35392165e+02, 4.36456768e+02
                        , 4.36904195e+02, 4.37875203e+02, 4.38184179e+02, 4.38820298e+02
                        , 4.39661064e+02, 4.40456672e+02, 4.42701340e+02, 4.43061910e+02
                        , 4.44887482e+02, 4.48496765e+02, 4.48828885e+02, 4.51939543e+02
                        , 4.52103085e+02, 4.52278333e+02, 4.53518940e+02, 4.55607856e+02
                        , 4.57349675e+02, 4.59729364e+02, 4.64144921e+02, 4.64980817e+02
                        , 4.65264733e+02, 4.65568433e+02, 4.66177616e+02, 4.68851941e+02
                        , 4.68873655e+02, 4.69039040e+02, 4.69212586e+02, 4.69288630e+02
                        , 4.69416704e+02, 4.70866529e+02, 4.72476820e+02, 4.73368454e+02
                        , 4.76102897e+02, 4.76303779e+02, 4.79619628e+02, 4.80177132e+02
                        , 4.80181132e+02, 4.80935324e+02, 4.81245016e+02, 4.81411898e+02
                        , 4.81840178e+02, 4.82059275e+02, 4.84458268e+02, 4.86426014e+02
                        , 4.87545445e+02, 4.87757724e+02, 4.88082737e+02, 4.88323562e+02
                        , 4.88750202e+02, 4.88904638e+02, 4.88982337e+02, 4.89541615e+02
                        , 4.89606786e+02, 4.91418406e+02, 4.91473824e+02, 4.91671778e+02
                        , 4.94191351e+02, 4.95223312e+02, 4.96778835e+02, 5.00904980e+02
                        , 5.02158590e+02, 5.03121171e+02, 5.03945529e+02, 5.04196096e+02
                        , 5.05777567e+02, 5.06356393e+02, 5.08209828e+02, 5.08219147e+02
                        , 5.09319996e+02, 5.10211377e+02, 5.12281673e+02, 5.12359282e+02
                        , 5.13469294e+02, 5.14285355e+02, 5.14755646e+02, 5.14923653e+02
                        , 5.15235166e+02, 5.15565379e+02, 5.15935048e+02, 5.16201955e+02
                        , 5.17028591e+02, 5.20142470e+02, 5.20238275e+02, 5.22392555e+02
                        , 5.23031452e+02, 5.23625286e+02, 5.24279409e+02, 5.24367944e+02
                        , 5.25077204e+02, 5.28797608e+02, 5.29985522e+02, 5.30543509e+02
                        , 5.31752280e+02, 5.35274472e+02, 5.37137643e+02, 5.38552744e+02
                        , 5.38660200e+02, 5.38861717e+02, 5.39237807e+02, 5.39828756e+02
                        , 5.40401168e+02, 5.40587612e+02, 5.40589552e+02, 5.40654679e+02
                        , 5.41216795e+02, 5.41587967e+02, 5.43657685e+02, 5.43900956e+02
                        , 5.44117424e+02, 5.44483667e+02, 5.47857188e+02, 5.48056633e+02
                        , 5.51812081e+02, 5.53340448e+02, 5.53457090e+02, 5.54519504e+02
                        , 5.56022206e+02, 5.56529228e+02, 5.56801165e+02, 5.58172196e+02
                        , 5.58435243e+02, 5.60266290e+02, 5.60552202e+02, 5.62028418e+02
                        , 5.63206893e+02, 5.63739036e+02, 5.64224569e+02, 5.64394002e+02
                        , 5.64714952e+02, 5.65302633e+02, 5.65528397e+02, 5.65800193e+02
                        , 5.66202880e+02, 5.68564618e+02, 5.69742602e+02, 5.70303858e+02
                        , 5.72830400e+02, 5.73271140e+02, 5.73415466e+02, 5.75676306e+02
                        , 5.75701396e+02, 5.76202590e+02, 5.76234117e+02, 5.76449779e+02
                        , 5.76482890e+02, 5.77053836e+02, 5.77315643e+02, 5.77683794e+02
                        , 5.78214963e+02, 5.79409074e+02, 5.80855459e+02, 5.80911125e+02
                        , 5.81431134e+02, 5.81609780e+02, 5.82667486e+02, 5.84513538e+02
                        , 5.86203517e+02, 5.87553039e+02, 5.90008942e+02, 5.91279753e+02
                        , 5.91822293e+02, 5.94330011e+02, 5.95989085e+02, 5.96306106e+02
                        , 5.96393689e+02, 5.97355765e+02, 5.98126676e+02, 5.99190502e+02
                        , 5.99442542e+02, 6.00268179e+02, 6.00492572e+02, 6.02675397e+02
                        , 6.03126930e+02, 6.03228331e+02, 6.06743951e+02, 6.08426146e+02
                        , 6.09264474e+02, 6.09374740e+02, 6.09888785e+02, 6.11174494e+02
                        , 6.11386920e+02, 6.11601699e+02, 6.13915184e+02, 6.16407125e+02
                        , 6.17377761e+02, 6.17952750e+02, 6.18272929e+02, 6.18362414e+02
                        , 6.18871701e+02, 6.19772327e+02, 6.22328111e+02, 6.23314984e+02
                        , 6.23379601e+02, 6.23947749e+02, 6.27656621e+02, 6.27680556e+02
                        , 6.27939910e+02, 6.29112974e+02, 6.30549111e+02, 6.31021459e+02
                        , 6.31556958e+02, 6.32131350e+02, 6.33873488e+02, 6.34070833e+02
                        , 6.34208914e+02, 6.35391404e+02, 6.35616206e+02, 6.36342188e+02
                        , 6.36886159e+02, 6.37233153e+02, 6.41023055e+02, 6.41034108e+02
                        , 6.41089593e+02, 6.41255494e+02, 6.41514218e+02, 6.42188673e+02
                        , 6.42601981e+02, 6.42654409e+02, 6.44890691e+02, 6.45547509e+02
                        , 6.47356951e+02, 6.47975176e+02, 6.48140800e+02, 6.49326095e+02
                        , 6.49807405e+02, 6.52117231e+02, 6.53291918e+02, 6.54845250e+02
                        , 6.55105599e+02, 6.55798583e+02, 6.56925739e+02, 6.59315542e+02
                        , 6.59676522e+02, 6.61364973e+02, 6.62250242e+02, 6.62529654e+02
                        , 6.63679436e+02, 6.64229211e+02, 6.64616742e+02, 6.64810735e+02
                        , 6.65598967e+02, 6.65832778e+02, 6.67865517e+02, 6.68002696e+02
                        , 6.68355112e+02, 6.71884866e+02, 6.73853415e+02, 6.74644310e+02
                        , 6.75037009e+02, 6.75126468e+02, 6.76507597e+02, 6.77741219e+02
                        , 6.80414640e+02, 6.80939903e+02, 6.83249286e+02, 6.83272457e+02
                        , 6.83557944e+02, 6.86074345e+02, 6.87772461e+02, 6.87789017e+02
                        , 6.88277983e+02, 6.89227628e+02, 6.90081527e+02, 6.90429413e+02
                        , 6.90777828e+02, 6.91615747e+02, 6.93070387e+02, 6.95191446e+02
                        , 6.96540116e+02, 6.97555764e+02, 6.98149522e+02, 7.01022582e+02
                        , 7.01951355e+02, 7.03556445e+02, 7.04084829e+02, 7.04227516e+02
                        , 7.04359964e+02, 7.05914657e+02, 7.06111621e+02, 7.09115189e+02
                        , 7.11078908e+02, 7.12187432e+02, 7.12717453e+02, 7.13140471e+02
                        , 7.14553417e+02, 7.15345353e+02, 7.19646813e+02, 7.19834829e+02
                        , 7.19908713e+02, 7.21399034e+02, 7.22553877e+02, 7.24677550e+02
                        , 7.25802585e+02, 7.26534057e+02, 7.26902165e+02, 7.27302127e+02
                        , 7.28204447e+02, 7.28940606e+02, 7.29000117e+02, 7.29403901e+02
                        , 7.30149625e+02, 7.31193082e+02, 7.31768437e+02, 7.32037787e+02
                        , 7.32549131e+02, 7.32567165e+02, 7.33700747e+02, 7.35956951e+02
                        , 7.37838142e+02, 7.37971496e+02, 7.38644450e+02, 7.39724364e+02
                        , 7.40259216e+02, 7.40348631e+02, 7.41526088e+02, 7.43239173e+02
                        , 7.43839888e+02, 7.44229441e+02, 7.47797632e+02, 7.49124628e+02
                        , 7.52043856e+02, 7.52114624e+02, 7.53303578e+02, 7.53901289e+02
                        , 7.53948406e+02, 7.55973485e+02, 7.56176043e+02, 7.56804278e+02
                        , 7.57283780e+02, 7.57352003e+02, 7.57445183e+02, 7.58588904e+02
                        , 7.59043971e+02, 7.60714883e+02, 7.62484054e+02, 7.62535880e+02
                        , 7.63053306e+02, 7.63118077e+02, 7.63829679e+02, 7.64925656e+02
                        , 7.65845492e+02, 7.66693169e+02, 7.67470679e+02, 7.67532220e+02
                        , 7.68509291e+02, 7.68809574e+02, 7.68840451e+02, 7.69080632e+02
                        , 7.69934956e+02, 7.72778871e+02, 7.72985721e+02, 7.73598522e+02
                        , 7.73805355e+02, 7.73922924e+02, 7.77084491e+02, 7.77381724e+02
                        , 7.77959707e+02, 7.78213109e+02, 7.79523488e+02, 7.80582951e+02
                        , 7.83014931e+02, 7.84967188e+02, 7.85431800e+02, 7.85725717e+02
                        , 7.86044338e+02, 7.86304197e+02, 7.86336266e+02, 7.86346349e+02
                        , 7.87069101e+02, 7.90452024e+02, 7.91541860e+02, 7.92212832e+02
                        , 7.93988747e+02, 7.94129148e+02, 7.94664084e+02, 7.98119510e+02
                        , 8.00013713e+02, 8.02097333e+02, 8.02405779e+02, 8.02823729e+02
                        , 8.04406194e+02, 8.04505739e+02, 8.05934030e+02, 8.08452422e+02
                        , 8.08523711e+02, 8.08723523e+02, 8.09400596e+02, 8.10304500e+02
                        , 8.10607654e+02, 8.10840285e+02, 8.11868031e+02, 8.11989383e+02
                        , 8.12317230e+02, 8.13934122e+02, 8.13953125e+02, 8.15066017e+02
                        , 8.15594033e+02, 8.16225721e+02, 8.16772227e+02, 8.16812208e+02
                        , 8.19250875e+02, 8.20223091e+02, 8.20225337e+02, 8.20393430e+02
                        , 8.29448018e+02, 8.30020564e+02, 8.31787487e+02, 8.33123356e+02
                        , 8.33244858e+02, 8.34466390e+02, 8.34654784e+02, 8.38489183e+02
                        , 8.38694970e+02, 8.39015709e+02, 8.39137107e+02, 8.39880436e+02
                        , 8.40236583e+02, 8.40641403e+02, 8.40665050e+02, 8.42097974e+02
                        , 8.42873862e+02, 8.43096439e+02, 8.43510169e+02, 8.44789923e+02
                        , 8.45701530e+02, 8.46643124e+02, 8.47386801e+02, 8.48194057e+02
                        , 8.49447952e+02, 8.49752384e+02, 8.50016506e+02, 8.50622962e+02
                        , 8.51089351e+02, 8.51766039e+02, 8.52294099e+02, 8.52491315e+02
                        , 8.52804298e+02, 8.53167546e+02, 8.53366159e+02, 8.54192884e+02
                        , 8.55466807e+02, 8.55928249e+02, 8.56440319e+02, 8.58466185e+02
                        , 8.61007623e+02, 8.61076507e+02, 8.61334877e+02, 8.62561514e+02
                        , 8.64708737e+02, 8.64887892e+02, 8.65841165e+02, 8.66513709e+02
                        , 8.67334564e+02, 8.67596827e+02, 8.68244308e+02, 8.68303878e+02
                        , 8.68883006e+02, 8.70998068e+02, 8.73064779e+02, 8.73389759e+02
                        , 8.74910839e+02, 8.75931801e+02, 8.76355886e+02, 8.77827004e+02
                        , 8.78010950e+02, 8.78036657e+02, 8.78293104e+02, 8.80020708e+02
                        , 8.81272394e+02, 8.82537007e+02, 8.83731329e+02, 8.85444103e+02
                        , 8.86064420e+02, 8.87899124e+02, 8.88388005e+02, 8.88463143e+02
                        , 8.89003456e+02, 8.89934117e+02, 8.90133410e+02, 8.91403460e+02
                        , 8.91665889e+02, 8.92425346e+02, 8.93292187e+02, 8.94400743e+02
                        , 8.94594999e+02, 8.94699989e+02, 8.94839935e+02, 8.95103431e+02
                        , 8.97588151e+02, 8.97682296e+02, 8.98467067e+02, 8.98528279e+02
                        , 8.99863962e+02, 8.99971260e+02, 9.00471365e+02, 9.00788854e+02
                        , 9.01737031e+02, 9.02149659e+02, 9.02185937e+02, 9.02253339e+02
                        , 9.02706930e+02, 9.03999074e+02, 9.04074598e+02, 9.04813907e+02
                        , 9.05545647e+02, 9.05634538e+02, 9.08423935e+02, 9.08559560e+02
                        , 9.09130444e+02, 9.10977264e+02, 9.11565821e+02, 9.12234496e+02
                        , 9.12411773e+02, 9.13484739e+02, 9.15011006e+02, 9.15903329e+02
                        , 9.19004812e+02, 9.19718406e+02, 9.21725066e+02, 9.23132409e+02
                        , 9.23605720e+02, 9.25718587e+02, 9.27217127e+02, 9.27404897e+02
                        , 9.30841380e+02, 9.31158396e+02, 9.32259978e+02, 9.34467458e+02
                        , 9.34854584e+02, 9.34916062e+02, 9.37210976e+02, 9.37561356e+02
                        , 9.39998253e+02, 9.46481962e+02, 9.48874267e+02, 9.48948993e+02
                        , 9.49705406e+02, 9.50342019e+02, 9.50997403e+02, 9.51246788e+02
                        , 9.53514943e+02, 9.55085873e+02, 9.55216785e+02, 9.55505424e+02
                        , 9.56188666e+02, 9.56389351e+02, 9.57621362e+02, 9.59024920e+02
                        , 9.62755202e+02, 9.63226556e+02, 9.63659906e+02, 9.63956040e+02
                        , 9.64788578e+02, 9.66879969e+02, 9.67002919e+02, 9.67407402e+02
                        , 9.67588529e+02, 9.67867093e+02, 9.69495922e+02, 9.71664408e+02])


def process(mu=0, beta=0, nu=2, gamma=2, mu_W=0, std_W=1, T_horizon=1, N_Processes=1000, N_epochs=1000, it=1,
            return_epochs=False):
    # Inputs are the  NG(mu, beta, nu, gamma2/2) parameters, conditionally Gaussian parameters (for U_i's),
    # and simulation parameters.
    processes2 = []
    process2_at_T = []
    processes = []
    process_at_T = []
    time_ax = np.linspace(0, T_horizon, 100)
    for i in range(it):
        for _ in tqdm(range(N_Processes)):
            epochs = np.cumsum(np.random.exponential(1, N_epochs)) / T_horizon
            gamma_jump_sizes = gammaJumps(nu, gamma ** 2 / 2, epochs)
            # Generate normal gamma jumps
            jump_times = np.random.uniform(0.0, T_horizon, size=gamma_jump_sizes.shape[0])
            U_is = np.random.normal(mu_W, std_W, size=gamma_jump_sizes.shape[0])
            mean_subordination = np.ones(gamma_jump_sizes.shape[0]) * mu
            brownian_drift = beta * gamma_jump_sizes
            brownian_motion = np.array(
                [np.sqrt(gamma_jump_sizes[i]) * U_is[i] for i in range(gamma_jump_sizes.shape[0])])
            ng_jump_sizes = brownian_drift + brownian_motion
            ng_process = np.array(
                [np.sum(((np.ones(gamma_jump_sizes.shape[0]) * mu * t + ng_jump_sizes) * (jump_times <= t))) for t in
                 time_ax])
            if i == 0:
                processes.append(ng_process)
            elif i == 1:
                processes2.append(ng_process)

    for p1 in processes:
        # plt.plot(time_ax, p)  # Plot different NG processes
        process_at_T.append(p1[-1])  # Plot Normal Gamma process at t = T (=1)
    for p2 in processes2:
        # plt.plot(time_ax, p)  # Plot different NG processes
        process2_at_T.append(p2[-1])  # Plot Normal Gamma process at t = T (=1)

    rvs = []
    for _ in tqdm(range(len(process_at_T))):
        rvs.append(generate_RVs(mu, beta, nu, gamma ** 2 / 2, mu_W, std_W, 1)[0][0])
    process_at_T = np.array(process_at_T)
    process2_at_T = np.array(process2_at_T)
    """ fig, ax = plt.subplots()
    if it == 2:
        plot_qq(process_at_T, rvs, process2_at_T, ax=ax)
    else:
        plot_qq(process_at_T, rvs, ax=ax)
    
    # plot_histogram1(process_at_T, rvs)
    # plt.xlabel("Time")
    # plt.ylabel("Location")
    # plt.title("Normal Gamma Process")"""
    # plt.show()
    if return_epochs:
        return process_at_T, epochs
    return process_at_T


def truncated_process(mu=0, beta=0, nu=2, gamma=2, mu_W=0, std_W=1, T_horizon=1, N_Processes=1, N_epochs=1000,
                      truncation=1e-6, it=1, epochs=None):
    # Inputs are the  NG(mu, beta, nu, gamma2/2) parameters, conditionally Gaussian parameters (for U_i's),
    # and simulation parameters.
    processes2 = []
    process2_at_T = []
    processes = []
    process_at_T = []
    epoch_cutoff = nu * special.exp1(truncation * gamma ** 2 / 2)
    print(epoch_cutoff)
    time_ax = np.linspace(0, T_horizon, 100)
    for i in range(it):
        for _ in tqdm(range(N_Processes)):
            epochs = np.cumsum(stats.truncexpon.rvs(b=epoch_cutoff, scale=1 / 1, size=N_epochs)) / T_horizon
            gamma_jump_sizes = gammaJumps(nu, gamma ** 2 / 2, epochs)
            jump_times = np.random.uniform(0.0, T_horizon, size=gamma_jump_sizes.shape[0])
            U_is = np.random.normal(mu_W, std_W, size=gamma_jump_sizes.shape[0])
            # Generate normal gamma jumps
            mean_subordination = np.ones(gamma_jump_sizes.shape[0]) * mu
            brownian_drift = beta * gamma_jump_sizes
            brownian_motion = np.array(
                [np.sqrt(gamma_jump_sizes[i]) * U_is[i] for i in range(gamma_jump_sizes.shape[0])])
            ng_jump_sizes = mean_subordination + brownian_drift + brownian_motion
            ng_process = np.array([np.sum((ng_jump_sizes * (jump_times <= t))) for t in time_ax])
            if i == 0:
                processes.append(ng_process)
            elif i == 1:
                processes2.append(ng_process)
    fig, ax = plt.subplots()
    for p1 in processes:
        # plt.plot(time_ax, p1)  # Plot different NG processes
        process_at_T.append(p1[-1])  # Plot Normal Gamma process at t = T (=1)
    process_at_T = np.array(process_at_T)
    for p2 in processes2:
        # plt.plot(time_ax, p)  # Plot different NG processes
        process2_at_T.append(p2[-1])  # Plot Normal Gamma process at t = T (=1)
    process2_at_T = np.array(process2_at_T)
    rvs = []
    for _ in tqdm(range(len(process_at_T))):
        rvs.append(generate_RVs(mu, beta, nu, gamma ** 2 / 2, mu_W, std_W, 1)[0][0])
    if it == 2:
        plot_qq(process_at_T, rvs, process2_at_T, ax=ax,
                label="Truncated Normal Gamma QQ Plot with $\Gamma_{i} < $" + str(round(epoch_cutoff, 3)))
    elif it == 1:
        plot_qq(process_at_T, rvs, ax=ax,
                label="Truncated Normal Gamma QQ Plot with $\Gamma_{i} < $" + str(round(epoch_cutoff, 3)))
    """plt.xlabel("Time")
    plt.ylabel("Location")
    plt.title("Truncated Normal Gamma Process with $\Gamma_{i} < $" + str(round(epoch_cutoff, 3)))"""
    plt.show()
    return process_at_T


def generate_error_process(mu=0, beta=0, nu=2, gamma=2, mu_W=0, std_W=1, T_horizon=1, N_Processes=1, N_epochs=1000,
                           truncation=1e-6, it=1):
    processes = []
    process_at_T = []
    time_ax = np.linspace(0, T_horizon, 100)
    epoch_cutoff = nu * special.exp1(truncation * gamma ** 2 / 2)
    print(epoch_cutoff)
    for _ in tqdm(range(N_Processes)):
        epochs = np.cumsum(np.random.exponential(1, N_epochs)) / T_horizon
        gamma_jump_sizes, x, indices = error_gammaJumps(nu, gamma ** 2 / 2, epochs)
        # Generate normal gamma jumps
        jump_times = []
        U_is = []
        for _ in gamma_jump_sizes:
            jump_times.append(np.random.uniform(0.0, T_horizon))
            U_is.append(np.random.normal(mu_W, std_W))
        jump_times = np.array(jump_times)
        U_is = np.array(U_is)
        mean_subordination = np.ones(gamma_jump_sizes.shape[0]) * mu
        brownian_drift = beta * gamma_jump_sizes
        brownian_motion = np.array(
            [np.sqrt(gamma_jump_sizes[i]) * U_is[i] for i in range(gamma_jump_sizes.shape[0])])
        ng_jump_sizes = mean_subordination + brownian_drift + brownian_motion
        ng_process = np.array(
            [np.sum((ng_jump_sizes * (jump_times <= t))) for t in
             time_ax])
        # Generate truncated
        l = indices * (epochs <= epoch_cutoff)
        trun_gamma_jump_sizes = x[l]
        trun_jump_times = [0] * trun_gamma_jump_sizes.shape[0]
        trun_U_is = [0] * trun_gamma_jump_sizes.shape[0]
        for i in range(gamma_jump_sizes.shape[0]):
            if gamma_jump_sizes[i] in trun_gamma_jump_sizes:
                arg = np.where(trun_gamma_jump_sizes == gamma_jump_sizes[i])[0][0]
                trun_jump_times[arg] = jump_times[i]
                trun_U_is[arg] = U_is[i]
        trun_jump_times = np.array(trun_jump_times)
        trun_U_is = np.array(trun_U_is)
        mean_subordination = np.ones(trun_gamma_jump_sizes.shape[0]) * mu
        brownian_drift = beta * trun_gamma_jump_sizes
        brownian_motion = np.array(
            [np.sqrt(trun_gamma_jump_sizes[i]) * trun_U_is[i] for i in range(trun_gamma_jump_sizes.shape[0])])
        trun_ng_jump_sizes = mean_subordination + brownian_drift + brownian_motion
        trun_ng_process = np.array(
            [np.sum((trun_ng_jump_sizes * (trun_jump_times <= t))) for t in
             time_ax])
        processes.append(np.array(ng_process) - np.array(trun_ng_process))

    for p1 in processes:
        # plt.plot(time_ax, p)  # Plot different NG processes
        process_at_T.append(p1[-1])  # Plot Normal Gamma process at t = T (=1)

    process_at_T = np.array(process_at_T)

    return process_at_T


def CLT(mu=0, beta=0, nu=2, gamma=2, mu_W=0, std_W=1, T_horizon=1, N_Processes=1, N_epochs=1000, truncation=1e-13,
        it=1):
    # Define random process variance
    a = (2 * nu / gamma ** 2) * (std_W ** 2 + 2 * mu_W ** 2 / gamma ** 2)
    b = (2 * nu * mu_W ** 2) / gamma ** 2
    variance = a - np.exp(-truncation * gamma ** 2 / 2) * (b * truncation + a)
    for i in range(it):
        error_process = []
        for _ in range(N_Processes):
            process_at_T, epochs = process(mu, beta, nu, gamma, mu_W, std_W, T_horizon, N_epochs=N_epochs,
                                           return_epochs=True, N_Processes=1)
            tprocess_at_T = truncated_process(mu, beta, nu, gamma, mu_W, std_W, T_horizon, N_epochs=N_epochs,
                                              truncation=truncation, epochs=epochs, N_Processes=1)
            error_process.append(process_at_T - tprocess_at_T)
        error_process = np.array(error_process)
        if i == 0:
            error_process_1 = (error_process - np.mean(error_process) * np.ones(error_process.shape[0])) / np.std(
                error_process)
        elif i == 1:
            error_process_2 = (error_process - np.mean(error_process) * np.ones(error_process.shape[0])) / np.std(
                error_process)
    # Check if qq plot matches the standard Normal distribution
    fig, ax = plt.subplots()
    # plot_histogram1(np.array(error_process_1))
    if it == 2:
        plot_qq(error_process_1, np.random.normal(0, 1, size=error_process_1.shape[0]), error_process_2, ax=ax,
                label="NG Residuals QQ Plot")
    elif it == 1:
        plot_qq(error_process_1, np.random.normal(0, 1, size=error_process_1.shape[0]), ax=ax,
                label="NG Residuals QQ Plot")
    print(stats.kstest(error_process_1, 'norm').pvalue)
    plt.show()


def CLT2(mu=0, beta=0, nu=2, gamma=2, mu_W=0, std_W=1, T_horizon=1, N_Processes=1, N_epochs=1000, truncation=1e-13,
         it=1):
    # Define random process variance
    a = (2 * nu / gamma ** 2) * (std_W ** 2 + 2 * mu_W ** 2 / gamma ** 2)
    b = (2 * nu * mu_W ** 2) / gamma ** 2
    variance = a - np.exp(-truncation * gamma ** 2 / 2) * (b * truncation + a)
    epoch_cutoff = nu * special.exp1(truncation * gamma ** 2 / 2)
    for i in range(it):
        error_process = generate_error_process(mu, beta, nu, gamma, mu_W, std_W, T_horizon, N_Processes, N_epochs,
                                               truncation)
        if np.std(error_process) == 0:
            error_process_1 = error_process - np.mean(error_process) * np.ones(error_process.shape[0])
            error_process_2 = error_process - np.mean(error_process) * np.ones(error_process.shape[0])
        elif i == 0:
            error_process_1 = (error_process - np.mean(error_process) * np.ones(error_process.shape[0])) / np.std(
                error_process)
        elif i == 1:
            error_process_2 = (error_process - np.mean(error_process) * np.ones(error_process.shape[0])) / np.std(
                error_process)
    # Check if qq plot matches the standard Normal distribution
    print(variance)
    print(np.std(error_process) ** 2)
    fig, ax = plt.subplots()
    plot_histogram1(np.array(error_process_1),
                    label="NG Residuals Histogram with $\Gamma_{i} < $" + str(round(epoch_cutoff, 3)))
    """if it == 2:
        plot_qq(error_process_1, np.random.normal(0, 1, size=error_process_1.shape[0]), error_process_2, ax=ax,
                label="NG Residuals QQ Plot with $\Gamma_{i} < $" + str(round(epoch_cutoff, 3)))
    elif it == 1:
        plot_qq(error_process_1, np.random.normal(0, 1, size=error_process_1.shape[0]), ax=ax,
                label="NG Residuals QQ Plot with $\Gamma_{i} < $" + str(round(epoch_cutoff, 3)))
    print(stats.kstest(error_process_1, 'norm').pvalue)"""
    plt.savefig("NGHistogramLargeVal.png")
    plt.show()
    return stats.kstest(error_process_1, 'norm').pvalue


def CLT_pvalues(mu=0, beta=0, nu=2, gamma=2, mu_W=0, std_W=1, T_horizon=1, N_Processes=1, N_epochs=1000,
                truncation=1e-20):
    # truncations = [1e-13, 1e-12, 1e-11, 1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1]
    pvals = []
    epoch_cutoff = nu * special.exp1(truncation * gamma ** 2 / 2)
    for _ in range(10):
        pval = CLT2(mu, beta, nu, gamma, mu_W, std_W, T_horizon, N_Processes, N_epochs, truncation)
        print(pval)
        pvals.append(pval)
    pvals = np.array(pvals)
    fig, ax = plt.subplots()
    labels = ["P-Value $>0.05$", "Rejected P-Value"]
    acc_ratio = 100 * np.sum(pvals > 0.05) / 10
    sizes = [acc_ratio, 100 - acc_ratio]
    explode = (0.1, 0)
    ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
           shadow=False, startangle=90)
    ax.axis('equal')
    plt.title("Proportion of Accepted P-values with $\Gamma_{i} < $" + str(2e-10))
    plt.show()


def check():
    xvals = np.linspace(0, 10, 10000)
    yvals = np.exp(-xvals)
    plt.plot(xvals, yvals, label='$ H(\Gamma_{i}, U_{i}) $')
    plt.plot(np.ones(xvals.shape[0]) * 5, np.linspace(-0.1, max(yvals), xvals.shape[0]),
             label="$\Gamma_{i} = \Gamma_{max}$")
    plt.xlabel("$\Gamma_{i}$")
    plt.ylabel("Normal Gamma Jumps")
    plt.ylim(-0.1, max(yvals) + 0.01)
    plt.legend()
    section = np.linspace(0, 5, 10000)
    plt.title("Arbitrary $H(\Gamma_{i}, U_{i})$")
    plt.show()


CLT2(N_Processes=1000000, N_epochs=20000, truncation=1e-190)
